/* Global styles */
* {
  box-sizing: border-box;
}

/* Parallax container */
.parallax {
  background-color: #FEDCC8;
  perspective: 500px; /* Adjust to control the depth effect */
  transform-style: preserve-3d;
  height: 200vh; /* Keep it to the full viewport height */
  width: 100vw; /* Full viewport width */
  position: relative;
  overflow: hidden; /* Hide overflow outside the container */
}

/* Parallax layers */
.parallax__layer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh; /* Each layer fills the viewport height */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1; /* Ensure layers stay above the background but behind other content */
}

/* Adjust parallax layer image properties */
.parallax__layer img {
  max-width: 100%;
  max-height: 100%;
  object-fit: cover; /* Make sure the images cover the layer without stretching */
}

/* Mask element to cover anything below the parallax */
.parallax__mask {
  position: absolute;
  top: 55vh; /* Adjust to where you want to start covering the reflection */
  left: 0;
  right: 0;
  height: 45vh; /* Enough to cover from 'top' down to the bottom */
  background: #2d112b; /* Same background color you want below the images */
  z-index: 2; /* Ensure itâ€™s on top of the images */
}

/* Cover element */
.parallax__cover {
  background: #2d112b; /* Change to your desired background color */
  position: absolute;
  top: 100vh; /* Start right after the parallax viewport */
  left: 0;
  right: 0;
  height: 3000px; /* Adjust the height as needed */
  z-index: 3;
}

/* Generate layer transforms based on scroll using SCSS loop */
$parallax__layers: 6;

@for $i from 0 through $parallax__layers {
  // Calculate a factor: higher layers (i=0) appear further back.
  $factor: ($parallax__layers - $i) / 2;
  .parallax__layer__#{$i} {
    transform: translateZ(-#{$factor * 100}px) scale(#{ $factor + 1});
  }
}

/* Adding some transitions to make the parallax smoother */
.parallax__layer {
  transition: transform 0.1s ease-out;
}
